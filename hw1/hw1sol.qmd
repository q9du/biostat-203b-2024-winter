---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Qianhui Du, UID: 006332140"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** Display the URL of my GitHub repository here. <https://github.com/q9du/biostat-203b-2024-winter>

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** I completed the CITI training. Here is the link to my [completion report](https://www.citiprogram.org/verify/?k5baafa23-1270-42b0-b46d-641439e36a66-60370434). Here is the link to my [completion certificate](https://www.citiprogram.org/verify/?wefa273b2-067f-4122-82df-c9708bc017d3-60370434).

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 
```{bash}
#| eval: false
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

**Answer:** I created a symbolic link `mimic` to my MIMIC data folder. Here is the output of `ls -l ~/mimic/`:
```{bash}
ls -l ~/mimic/
```

  Use Bash commands to answer following questions.

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

```{bash}
ls -l ~/mimic/hosp
ls -l ~/mimic/icu
```
**Answer:** It is possible that these data files are distributed as .csv.gz files instead of .csv files for compression purposes, which helps reduce file size and improve storage and distribution efficiency.

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Answer:** 
`zcat` is used to display the contents of compressed files without decompressing them.
`zless` can interactively view the contents of compressed files and is used to view the contents of compressed files one screen at a time.
`zmore` is used to paginate the contents of compressed files and display them one screen at a time.
`zgrep` is used to search for patterns in compressed files without decompressing them first.

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: true
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

```{bash}
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  echo "Number of lines in $datafile:"
  zcat < "$datafile" | wc -l
done
```

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
zcat < ~/mimic/hosp/admissions.csv.gz | wc -l
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $3}' | sort -u | wc -l
zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $1}' | sort -u | wc -l
```
**Answer:** There are 431232 rows in this data file. There are 180733 unique patients in this data file. They do not match the number of patients listed in the patients.csv.gz file.

6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 |awk -F, '{print $6}' | sort | uniq -c 
zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 |awk -F, '{print $8}' | sort | uniq -c 
zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 |awk -F, '{print $10}' | sort | uniq -c 
zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 |awk -F, '{print $13}' | sort | uniq -c
```

7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

```{bash}
#| eval: true
ls -lh ~/mimic/hosp/labevents.csv.gz
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ./labevents.csv

ls -lh ./labevents.csv
time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
time wc -l ./labevents.csv
```

```{bash}
#| eval: true
rm ./labevents.csv
```


**Answer:** The compressed gz file size is 1.9G and the uncompressed file size is 13G. The run time of `zcat < ~/mimic/labevents.csv.gz | wc -l`  and the run time of `wc -l labevents.csv` also shows the differences above. For big data files, the less the storage, the slow the speed.

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: true
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.
```{bash}
#| eval: true
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char: $(grep -o "$char" pg42671.txt | wc -l)
  # some bash commands here
done
```
**Answer:** `wget -nc` is used to download files from the network to ensure that the files will not be overwritten if they already exist locally. The number of times each of the four characters is mentioned using Linux commands: Elizabeth: 634, Jane: 293, Lydia: 170, Darcy: 417.

2. What's the difference between the following two commands?
```{bash}
#| eval: true
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: true
echo 'hello, world' >> test2.txt
```
**Answer:** 
For the first command, if test1.txt already exists, it will be overwritten with the new content. 
For the second command, if test2.txt already exists, the content will be preserved and the new string will be added to the end of the file.

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: true
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Answer:** 
`"$1"`: The first command line parameter, which is the file name.
`"$2"`: The second command line parameter, the end line.
`"$3"`: The third command line parameter, which is the number of lines extracted from the middle.
The first line of a shell script, shebang, specifies the interpreter that should be used to execute the script. It ensures correct interpretation and execution.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Answer:** 
`cal`: Displays the current month's calendar.
`cal 2024`: Displays the calendar for the year 2024.
`cal 9 1752`: Displays the calendar for September 1752.
`date`: Displays the current date and time.
`hostname`: Displays the hostname of the system.
`arch`: Displays the machine architecture of the system.
`uname -a`: Displays detailed system information.
`uptime`: Displays how long the system has been running.
`who am i`: Displays the current user and terminal.
`who`: Displays information about users who are currently logged in.
`w`: Displays information about logged-in users and their activities.
`id`: Displays user and group information for the current user.
`last | head`: Displays a list of last logged-in users.
`echo {con,pre}{sent,fer}{s,ed}`: Demonstrates brace expansion in Bash.
`time sleep 5`: Measures the time it takes to execute the 'sleep 5' command.
`history | tail`: Displays the last few commands from the command history.

## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Answer:** Here is the screenshot of Section 4.1.5 of the book: ![Section 4.1.5 of the book](./book.jpg)