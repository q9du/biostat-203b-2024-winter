---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 9 @ 11:59PM
author: "Qianhui Du, UID: 006332140"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: true    
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(data.table)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer
```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage.) 

```{r}
file_path <- "~/mimic/hosp/admissions.csv.gz"
```
```{r}
baser_time <- system.time({
  baser_data <- read.csv(file_path)
})[3]
baser_memory <- object_size(baser_data)
tidyverse_time <- system.time({
  tidyverse_data <- read_csv(file_path)
})[3]
tidyverse_memory <- object_size(tidyverse_data)
datatable_time <- system.time({
  datatable_data <- fread(file_path)
})[3]
datatable_memory <- object_size(datatable_data)
```
```{r}
cat("Base R Time:", baser_time, "\n")
cat("Base R Memory Usage:", baser_memory, "\n")
cat("Tidyverse Time:", tidyverse_time, "\n")
cat("Tidyverse Memory Usage:", tidyverse_memory, "\n")
cat("Data.table Time:", datatable_time, "\n")
cat("Data.table Memory Usage:", datatable_memory, "\n")
```
From the result, `fread` is the fastest. 
There is no difference in the (default) parsed data type. The column specification shows that all three methods infer the same data type for each column.
`Base R` or `read.csv` uses 158710640 bytes (approximately 151.4 MB) of memory.
`Tidyverse` or `read_csv` uses 55309384 bytes (approximately 52.7 MB) of memory.
`Data.table` or `fread` uses 50129376 bytes (approximately 47.8 MB) of memory.

### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

```{r}
specified_time <- system.time({
  specified_data <- read_csv(file_path)
})[3]
specified_memory <- object_size(specified_data)
```
```{r}
cat("Time:", specified_time, "\n")
cat("Memory Usage:", specified_memory, "\n")
```
When re-ingesting `admissions.csv.gz` by indicating appropriate column data types in `read_csv`, the run time did not change a lot, decreasing slightly from 0.541 seconds to 0.446 seconds.
The result tibble uses 55309384 bytes (approximately 52.7 MB) of memory.

## Q2. Ingest big data files

<p align="center">
  <img src="./bigfile.png" width="50%">
</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 125x bigger than `admissions.csv.gz`.
```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```
Display the first 10 lines of this file.
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">
  <img src="./readr_logo.png" width="20%">
</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 5 minutes on your computer, then abort the program and report your findings. 

```{r}
labevents_file <- "~/mimic/hosp/labevents.csv.gz"
labevents_data <- read_csv(labevents_file)
```
It took more than 5 minutes on my computer, so I aborted the program. `read_csv` cannot ingest `labevents.csv.gz` because the size of the file is too large.

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`.  Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

```{r}
labevents_file <- "~/mimic/hosp/labevents.csv.gz"
```
```{r}
labevents_data_selected <- read_csv(labevents_file, col_select = c("subject_id", "itemid", "charttime", "valuenum"))
```
`read_csv` cannot ingest `labevents.csv.gz` because the size of the file is too large.

### Q2.3 Ingest subset of `labevents.csv.gz`

<p align="center">
  <img src="./linux_logo.png" width="20%">
</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data.  Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. To save render time, put `#| eval: false` at the beginning of this code chunk.)

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

```{bash}
#| eval: false
zcat < ~/mimic/hosp/labevents.csv.gz | \
  awk -F ',' 'BEGIN{OFS=","} NR==1 || \
  ($5 == 50912 || $5 == 50971 || $5 == 50983 || \
  $5 == 50902 || $5 == 50882 || $5 == 51221 || \
  $5 == 51301 || $5 == 50931) {print $2, $5, $7, $10}' | \
  gzip > labevents_filtered.csv.gz
```
```{bash}
zcat < labevents_filtered.csv.gz | head -10
```
```{bash}
zcat < labevents_filtered.csv.gz | tail -n +2 | wc -l
```
```{r}
filtered_file <- "labevents_filtered.csv.gz"
system.time({
  labevents_filtered_data <- read_csv(filtered_file)
})
```
There are 24855909 lines in this new file. 
It takes `read_csv` 4.036 seconds to ingest `labevents_filtered.csv.gz`.

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">
  <img src="./arrow_logo.png" width="30%">
</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory. To save render time, put `#| eval: false` at the beginning of this code chunk.

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator. 

```{r}
#| eval: false
system("zcat < ~/mimic/hosp/labevents.csv.gz > labevents.csv")
```
```{r}
library(dplyr)
system.time({
  labevents_arrow <- arrow::open_dataset("labevents.csv", format = "csv") %>%
    dplyr::select(subject_id, itemid, charttime, valuenum) %>%
    dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
    dplyr::collect()
})
```
```{r}
nrow(labevents_arrow)
```
```{r}
sorted_labevents <- labevents_arrow %>%
  arrange(subject_id, charttime, itemid)
first10_sorted <- sorted_labevents %>% head(10)
print(first10_sorted)
```
The ingest+select+filter process takes 28.665 seconds.
Apache Arrow is a technology that allows computers to efficiently share and understand data, making communication between different software programs fast and seamless. It acts like a universal translator for data, ensuring smooth and fast collaboration between computer systems.

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">
  <img src="./parquet_logo.png" width="30%">
</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

```{r}
arrow::write_dataset(labevents_arrow, "labevents.parquet", format = "parquet")
```
```{r}
labevents_parquet <- arrow::open_dataset("labevents.parquet")
```
```{r}
file_size <- file.info("labevents.parquet")$size
file_size
```
```{r}
system.time({
  labevents_parquet_result <- labevents_parquet %>%
    dplyr::select(subject_id, itemid, charttime, valuenum) %>%
    dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) %>%
    dplyr::collect()
})
```
```{r}
nrow(labevents_parquet_result)
```
```{r}
first10_sorted_labevents_parquet <- labevents_parquet_result %>%
  arrange(subject_id, charttime, itemid)
first10_sorted <- first10_sorted_labevents_parquet %>% head(10)
print(first10_sorted)
```
The Parquet file `labevents.parquet` is 96 bytes in size.
The ingest+select+filter process of the Parquet file `labevents.parquet` takes 0.148 seconds.
Parquet is a data storage format that organizes information in a way that enables computers to efficiently read and process data ultra-fast. It's like a simplified digital information archiving system that optimizes the way computers process and retrieve data.

### Q2.6 DuckDB

<p align="center">
  <img src="./duckdb_logo.png" width="20%">
</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

```{r}
library(duckdb)
```
```{r}
parquet_file <- "labevents.parquet"
```
```{r}
start_time <- Sys.time()
```
```{r}
labevents_duckdb <- arrow::open_dataset(parquet_file) %>%
  arrow::to_duckdb()
```
```{r}
result <- labevents_duckdb %>%
  dplyr::select(subject_id, itemid, charttime, valuenum) %>%
  dplyr::filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931))
```
```{r}
end_time <- Sys.time()
processing_time <- end_time - start_time
print(processing_time)
```
```{r}
nrows <- result %>% count()
print(nrows)
```
```{r}
sorted_result <- result %>%
  arrange(subject_id, charttime, itemid)
first10_sorted <- sorted_result %>% head(10)
print(first10_sorted)
```
The ingest+convert+select+filter process takes 7.422905 seconds.
DuckDB is a high-performance database that can quickly organize and retrieve large amounts of data, making it an efficient tool for data analysis and management. It's like a super-fast digital information librarian.

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```
[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```
In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2. 

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

1. Unzipping the CSV File:
```{r}
system("zcat < ~/mimic/icu/chartevents.csv.gz > chartevents.csv")
```
2. Opening CSV File with Arrow:
```{r}
chartevents_arrow <- arrow::open_dataset("chartevents.csv", format = "csv")
```
3. Writing Dataset to Parquet Format:
```{r}
arrow::write_dataset(chartevents_arrow, "chartevents.parquet", format = "parquet")
```
4. Opening Parquet Dataset with Arrow:
```{r}
chartevents_parquet <- arrow::open_dataset("chartevents.parquet")
```
5. Filtering and Collecting Results:
```{r}
chartevents_parquet_result <- chartevents_parquet %>% 
  dplyr::filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) %>% 
  dplyr::collect()
```
6. Counting the Number of Rows:
```{r}
nrows <- chartevents_parquet_result %>% count()
print(nrows)
```
7. Displaying the First 10 Rows:
```{r}
first10_rows <- chartevents_parquet_result %>% head(10)
print(first10_rows)
```